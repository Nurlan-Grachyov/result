import logging
import unittest
from datetime import datetime
from unittest.mock import patch

import pandas as pd

from src.utils import greeting, read_file


class TestReadFile(unittest.TestCase):
    @patch("logging.getLogger")
    def test_read_file(self, mock_logger):
        data = {
            "Дата операции": ["2023-01-01", "2023-01-02"],
            "Дата платежа": ["2023-01-01", "2023-01-02"],
            "Номер карты": ["1234", "5678"],
            "Статус": ["завершен", "отменен"],
            "Сумма операции": [100.00, 150.00],
            "Валюта операции": ["RUB", "RUB"],
            "Сумма платежа": [100.00, 150.00],
            "Валюта платежа": ["RUB", "RUB"],
            "Кэшбэк": [1.00, 1.50],
            "Категория": ["продукты", "развлечения"],
            "MCC": [5411, 5813],
            "Описание": ["магазин", "кинотеатр"],
            "Бонусы (включая кэшбэк)": [10.00, 15.00],
            "Округление на инвесткопилку": [0.00, 0.00],
            "Сумма операции с округлением": [100.00, 150.00],
        }

        file = pd.DataFrame(data)

        transactions = read_file(file)

        expected_transactions = [
            {
                "Дата операции": "2023-01-01",
                "Дата платежа": "2023-01-01",
                "Номер карты": "1234",
                "Статус": "завершен",
                "Сумма операции": 100.00,
                "Валюта операции": "RUB",
                "Сумма платежа": 100.00,
                "Валюта платежа": "RUB",
                "Кэшбэк": 1.00,
                "Категория": "продукты",
                "MCC": 5411,
                "Описание": "магазин",
                "Бонусы (включая кэшбэк)": 10.00,
                "Округление на инвесткопилку": 0.00,
                "Сумма операции с округлением": 100.00,
            },
            {
                "Дата операции": "2023-01-02",
                "Дата платежа": "2023-01-02",
                "Номер карты": "5678",
                "Статус": "отменен",
                "Сумма операции": 150.00,
                "Валюта операции": "RUB",
                "Сумма платежа": 150.00,
                "Валюта платежа": "RUB",
                "Кэшбэк": 1.50,
                "Категория": "развлечения",
                "MCC": 5813,
                "Описание": "кинотеатр",
                "Бонусы (включая кэшбэк)": 15.00,
                "Округление на инвесткопилку": 0.00,
                "Сумма операции с округлением": 150.00,
            },
        ]

        self.assertEqual(transactions, expected_transactions)


#
# if __name__ == "__main__":
#     unittest.main()
#     logging.basicConfig(level=logging.INFO)
